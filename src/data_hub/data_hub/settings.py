"""
Django settings for data_hub project.

Generated by 'django-admin startproject' using Django 2.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os, boto3



# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'PLACEHOLDER')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'data.tnris.org',
    'api.tnris.org',
    'api-test.tnris.org',
    'stagingapi.tnris.org',
    'localhost',
    '127.0.0.1'
]

if True:
    AWS_REGION_NAME = "us-east-1"
    boto3_logs_client = boto3.client("logs", region_name=AWS_REGION_NAME)

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler'
            },
            'watchtower': {
                'class': 'watchtower.CloudWatchLogHandler',
                'boto3_client': boto3_logs_client,
                'log_group_name': '/ecs/api-tnris-org-staging',
                # Decrease the verbosity level here to send only those logs to watchtower,
                # but still see more verbose logs in the console. See the watchtower
                # documentation for other parameters that can be set here.
                'level': 'INFO'
            }
        },
        'loggers': {
            'errLog': {
                'level': 'INFO',
                'handlers': ['watchtower', 'console'],
                'propagate': False
            },
        },
    }

CORS_ORIGIN_ALLOW_ALL = True

APPEND_SLASH = False

# Contact SES Email config
EMAIL_BACKEND = 'django_ses.SESBackend'
AWS_ACCESS_KEY_ID = os.environ.get('AWS_SES_ACCESS_KEY')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SES_SECRET_KEY')

# If you're using prerender.io (the default backend):
SEO_JS_PRERENDER_TOKEN = os.environ.get('SEO_TOKEN', '')
SEO_JS_ENABLED = True
SEO_JS_USER_AGENTS = [
    "Googlebot",
    "Yahoo",
    "bingbot",
    "Badiu",
    "Ask Jeeves",
    "baiduspider",
    "facebookexternalhit",
    "twitterbot",
    "rogerbot",
    "linkedinbot",
    "embedly",
    "quoralink preview'",
    "showyoubot",
    "outbrain",
    "pinterest",
    "developersgoogle.com/+/web/snippet"
]

# Application definition

INSTALLED_APPS = [
    'data_hub',
    'lcd',
    'lore',
    'msd',
    'tnris_org',
    'contact',
    'corsheaders',
    'django_admin_listfilter_dropdown',
    'django.contrib.contenttypes',
    'grappelli.dashboard',
    'grappelli',
    'django_json_widget',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.gis',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admindocs',
    'django.contrib.sitemaps',
    'django.contrib.postgres',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_swagger',
    'storages',
    'django_seo_js',
    'rest_framework_gis',
    'axes',
    'analytics'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.admindocs.middleware.XViewMiddleware',
    'django_seo_js.middleware.UserAgentMiddleware',  # If you want to detect by user agent
    'django_seo_js.middleware.EscapedFragmentMiddleware'  # If you're using #!
]

ROOT_URLCONF = 'data_hub.urls'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'data_hub.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': os.environ.get('DB_NAME', 'data_hub'),
        'USER': os.environ.get('DB_USER', 'tnris'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST', '127.0.0.1'),
        'PORT': os.environ.get('DB_PORT', '9000')
    },
    'analytics': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'analytics',
        'USER': os.environ.get('DB_USER', 'tnris'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST', '127.0.0.1'),
        'PORT': os.environ.get('DB_PORT', '9000')
    } 
}

# Database Routers
# https://docs.djangoproject.com/en/5.0/topics/db/multi-db/#using-routers

DATABASE_ROUTERS = ['analytics.analytics_router.AnalyticsRouter']

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Chicago'

USE_I18N = True

USE_L10N = True

USE_TZ = True
AXES_ENABLED = True
AXES_FAILURE_LIMIT = 5
AXES_COOLOFF_TIME = .05
# Grappelli Settings
GRAPPELLI_ADMIN_TITLE = "TNRIS Application Programming Interface (API) Console"
GRAPPELLI_SWITCH_USER = True
GRAPPELLI_INDEX_DASHBOARD = 'dashboard.CustomIndexDashboard'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static")

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication'
    ],
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'PAGE_SIZE': 1000
}

TIME_INPUT_FORMATS = [
    '%I:%M %p',  # 6:22 PM
    '%I:%M:%S %p',  # 6:22:44 PM
    '%I %p',  # 6 PM
    '%H:%M:%S',     # '14:30:59'
    '%H:%M:%S.%f',  # '14:30:59.000200'
    '%H:%M',        # '14:30'
]

AUTHENTICATION_BACKENDS = [
    # AxesStandaloneBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
    'axes.backends.AxesStandaloneBackend',

    # Django ModelBackend is the default authentication backend.
    'django.contrib.auth.backends.ModelBackend',
]

AXES_ENABLE_ADMIN = True
SITE_ID = 1

CSRF_FAILURE_VIEW = 'data_hub.views.csrf_failure'

# new auto field setting since django 3.2 defining primary key type for models
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")